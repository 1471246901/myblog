# --------------------------------全局块------------------------------
# ----------------影响nginx服务器整体运行的配置指令--------------------
# nginx的进程会以这个帐户来执行。主要是权限控制等
# user  nobody;
# 并发处理的值越大越能处理更高的并发
worker_processes  1;

#错误日志
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# 将进程pid写入到这个文件
#pid        logs/nginx.pid;
# -------------------------------events块-----------------------------
# -------------------主要影响Nginx服务器与用户的网络连接---------------

events {
	# 最大连接数
    worker_connections  1024;
}

# -------------------------------http块-----------------------------
# ----文件引入、MINE-TYPE定义、日志自定义、链接超时时间、单链接请求数上限等--

http {
	# 包含文件 MINE-TYPE定义 这样可以是配置文件更简洁
    include       mime.types;
    default_type  application/octet-stream;

    # 日志自定义
	# 用来定义记录日志的格式（可以定义多种日志格式，取不同名字即可）
	# $remote_addr  #记录访问网站的客户端地址
    # $remote_user  #远程客户端用户名
    # $time_local  #记录访问时间与时区
    # $request  #用户的http请求起始行信息
    # $status  #http状态码，记录请求返回的状态码，例如：200、301、404等
    # $body_bytes_sent  #服务器发送给客户端的响应body字节数
    # $http_referer  #记录此次请求是从哪个连接访问过来的，可以根据该参数进行防盗链设置。
    # $http_user_agent  #记录客户端访问信息，例如：浏览器、手机客户端等
    # $http_x_forwarded_for  #当前端有代理服务器时，设置web节点记录客户端地址的配置，此参数生效的前提是代理服务器也要进行相关的x_forwarded_for设置
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

	# 用来指定日至文件的路径及使用的何种日志格式记录日志
    #access_log  logs/access.log  main;

	# 指定是否使用sendfile系统调用来传输文件。
    # sendfile系统调用在两个文件描述符之间直接传递数据(完全在内核中操作)，从而避免了数据在内核缓冲区和用户缓冲区之间的拷贝，操作效率很高，被称之为零拷贝。
    sendfile        on;
	
	# 在nginx中，tcp_nopush配置与tcp_nodelay“互斥”。它可以配置一次发送数据包的大小。也就是说，数据包累积到一定大小后就发送。
	# 在nginx中tcp_nopush必须和sendfile配合使用
    #tcp_nopush     on;

	# 超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
		# 监听的端口
        listen       80;
		# 主机名称
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

		# 路径跳转
        location / {
            root   html;
            index  index.html index.htm;
        }

		
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        # 错误页面配置
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
